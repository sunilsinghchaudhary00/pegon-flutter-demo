// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.pigon_demo;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Mymessage {
    private @NonNull String title;

    public @NonNull String getTitle() {
      return title;
    }

    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    private @NonNull String body;

    public @NonNull String getBody() {
      return body;
    }

    public void setBody(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"body\" is null.");
      }
      this.body = setterArg;
    }

    private @NonNull String email;

    public @NonNull String getEmail() {
      return email;
    }

    public void setEmail(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"email\" is null.");
      }
      this.email = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Mymessage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Mymessage that = (Mymessage) o;
      return title.equals(that.title) && body.equals(that.body) && email.equals(that.email);
    }

    @Override
    public int hashCode() {
      return Objects.hash(title, body, email);
    }

    public static final class Builder {

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String body;

      @CanIgnoreReturnValue
      public @NonNull Builder setBody(@NonNull String setterArg) {
        this.body = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@NonNull String setterArg) {
        this.email = setterArg;
        return this;
      }

      public @NonNull Mymessage build() {
        Mymessage pigeonReturn = new Mymessage();
        pigeonReturn.setTitle(title);
        pigeonReturn.setBody(body);
        pigeonReturn.setEmail(email);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(3);
      toListResult.add(title);
      toListResult.add(body);
      toListResult.add(email);
      return toListResult;
    }

    static @NonNull Mymessage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Mymessage pigeonResult = new Mymessage();
      Object title = pigeonVar_list.get(0);
      pigeonResult.setTitle((String) title);
      Object body = pigeonVar_list.get(1);
      pigeonResult.setBody((String) body);
      Object email = pigeonVar_list.get(2);
      pigeonResult.setEmail((String) email);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NotificationData {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String description;

    public @Nullable String getDescription() {
      return description;
    }

    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      NotificationData that = (NotificationData) o;
      return Objects.equals(id, that.id) && Objects.equals(name, that.name) && Objects.equals(description, that.description);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id, name, description);
    }

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String name;

      @CanIgnoreReturnValue
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String description;

      @CanIgnoreReturnValue
      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }

      public @NonNull NotificationData build() {
        NotificationData pigeonReturn = new NotificationData();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        pigeonReturn.setDescription(description);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(3);
      toListResult.add(id);
      toListResult.add(name);
      toListResult.add(description);
      return toListResult;
    }

    static @NonNull NotificationData fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      NotificationData pigeonResult = new NotificationData();
      Object id = pigeonVar_list.get(0);
      pigeonResult.setId((String) id);
      Object name = pigeonVar_list.get(1);
      pigeonResult.setName((String) name);
      Object description = pigeonVar_list.get(2);
      pigeonResult.setDescription((String) description);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CustomNumber {
    private @Nullable Long number;

    public @Nullable Long getNumber() {
      return number;
    }

    public void setNumber(@Nullable Long setterArg) {
      this.number = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      CustomNumber that = (CustomNumber) o;
      return Objects.equals(number, that.number);
    }

    @Override
    public int hashCode() {
      return Objects.hash(number);
    }

    public static final class Builder {

      private @Nullable Long number;

      @CanIgnoreReturnValue
      public @NonNull Builder setNumber(@Nullable Long setterArg) {
        this.number = setterArg;
        return this;
      }

      public @NonNull CustomNumber build() {
        CustomNumber pigeonReturn = new CustomNumber();
        pigeonReturn.setNumber(number);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(number);
      return toListResult;
    }

    static @NonNull CustomNumber fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      CustomNumber pigeonResult = new CustomNumber();
      Object number = pigeonVar_list.get(0);
      pigeonResult.setNumber((Long) number);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return Mymessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return NotificationData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return CustomNumber.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Mymessage) {
        stream.write(129);
        writeValue(stream, ((Mymessage) value).toList());
      } else if (value instanceof NotificationData) {
        stream.write(130);
        writeValue(stream, ((NotificationData) value).toList());
      } else if (value instanceof CustomNumber) {
        stream.write(131);
        writeValue(stream, ((CustomNumber) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MessageApi {

    @NonNull 
    List<Mymessage> getMessage(@NonNull String fromemail);

    /** The codec used by MessageApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `MessageApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable MessageApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable MessageApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigon_demo.MessageApi.getMessage" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String fromemailArg = (String) args.get(0);
                try {
                  List<Mymessage> output = api.getMessage(fromemailArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NotificationApi {

    @NonNull 
    Boolean createNotificationChannel(@NonNull NotificationData data);

    @NonNull 
    Boolean openFile(@NonNull String filePath);

    /** The codec used by NotificationApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `NotificationApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable NotificationApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable NotificationApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigon_demo.NotificationApi.createNotificationChannel" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                NotificationData dataArg = (NotificationData) args.get(0);
                try {
                  Boolean output = api.createNotificationChannel(dataArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigon_demo.NotificationApi.openFile" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String filePathArg = (String) args.get(0);
                try {
                  Boolean output = api.openFile(filePathArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NumberApi {

    @NonNull 
    CustomNumber getNumber();

    /** The codec used by NumberApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `NumberApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable NumberApi api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable NumberApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigon_demo.NumberApi.getNumber" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  CustomNumber output = api.getNumber();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
