// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface Mymessage ()
+ (Mymessage *)fromList:(NSArray<id> *)list;
+ (nullable Mymessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface NotificationData ()
+ (NotificationData *)fromList:(NSArray<id> *)list;
+ (nullable NotificationData *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface CustomNumber ()
+ (CustomNumber *)fromList:(NSArray<id> *)list;
+ (nullable CustomNumber *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation Mymessage
+ (instancetype)makeWithTitle:(NSString *)title
    body:(NSString *)body
    email:(NSString *)email {
  Mymessage* pigeonResult = [[Mymessage alloc] init];
  pigeonResult.title = title;
  pigeonResult.body = body;
  pigeonResult.email = email;
  return pigeonResult;
}
+ (Mymessage *)fromList:(NSArray<id> *)list {
  Mymessage *pigeonResult = [[Mymessage alloc] init];
  pigeonResult.title = GetNullableObjectAtIndex(list, 0);
  pigeonResult.body = GetNullableObjectAtIndex(list, 1);
  pigeonResult.email = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable Mymessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [Mymessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.title ?: [NSNull null],
    self.body ?: [NSNull null],
    self.email ?: [NSNull null],
  ];
}
@end

@implementation NotificationData
+ (instancetype)makeWithId:(nullable NSString *)id
    name:(nullable NSString *)name
    description:(nullable NSString *)description {
  NotificationData* pigeonResult = [[NotificationData alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.description = description;
  return pigeonResult;
}
+ (NotificationData *)fromList:(NSArray<id> *)list {
  NotificationData *pigeonResult = [[NotificationData alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.description = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable NotificationData *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [NotificationData fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.name ?: [NSNull null],
    self.description ?: [NSNull null],
  ];
}
@end

@implementation CustomNumber
+ (instancetype)makeWithNumber:(nullable NSNumber *)number {
  CustomNumber* pigeonResult = [[CustomNumber alloc] init];
  pigeonResult.number = number;
  return pigeonResult;
}
+ (CustomNumber *)fromList:(NSArray<id> *)list {
  CustomNumber *pigeonResult = [[CustomNumber alloc] init];
  pigeonResult.number = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable CustomNumber *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [CustomNumber fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.number ?: [NSNull null],
  ];
}
@end

@interface nullPigeonPigeonCodecReader : FlutterStandardReader
@end
@implementation nullPigeonPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: 
      return [Mymessage fromList:[self readValue]];
    case 130: 
      return [NotificationData fromList:[self readValue]];
    case 131: 
      return [CustomNumber fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullPigeonPigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullPigeonPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Mymessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NotificationData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[CustomNumber class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullPigeonPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullPigeonPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullPigeonPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullPigeonPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetPigeonCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullPigeonPigeonCodecReaderWriter *readerWriter = [[nullPigeonPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpMessageApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MessageApi> *api) {
  SetUpMessageApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpMessageApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MessageApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigon_demo.MessageApi.getMessage", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetPigeonCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessageFromemail:error:)], @"MessageApi api (%@) doesn't respond to @selector(getMessageFromemail:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_fromemail = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<Mymessage *> *output = [api getMessageFromemail:arg_fromemail error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpNotificationApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NotificationApi> *api) {
  SetUpNotificationApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpNotificationApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NotificationApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigon_demo.NotificationApi.createNotificationChannel", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetPigeonCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createNotificationChannelData:error:)], @"NotificationApi api (%@) doesn't respond to @selector(createNotificationChannelData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NotificationData *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api createNotificationChannelData:arg_data error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigon_demo.NotificationApi.openFile", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetPigeonCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openFileFilePath:error:)], @"NotificationApi api (%@) doesn't respond to @selector(openFileFilePath:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_filePath = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api openFileFilePath:arg_filePath error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpNumberApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NumberApi> *api) {
  SetUpNumberApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpNumberApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NumberApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.pigon_demo.NumberApi.getNumber", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetPigeonCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getNumberWithError:)], @"NumberApi api (%@) doesn't respond to @selector(getNumberWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        CustomNumber *output = [api getNumberWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
